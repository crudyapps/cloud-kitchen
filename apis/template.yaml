AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Parameters:
  DynamoDbEndpoint:
    Type: String
    Description: Dynamo db endpoint
    Default: http://host.docker.internal:8000
  WebClientOrigin:
    Type: String
    Description: Web app origin
    Default: https://localhost:1234
  KitchenEventsStream:
    Type: String
    Description: Kinesis stream arn for menu events
  AccessTokenPublicKey:
    Type: String
    Description: Public Key to verify access token
    Default: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAznNPYN2YjcbT9AQta8zpD75rBtnW57kl9hNgO7mYBsE6k5Yvy4zVR8H1Cw5Mz/MfPafhUnFMboQ2RMympwyakhNRcbZPJWFyzgQk9Cyg8UrOJuQEMoXtAR/PJ3WUKvoF9ynvUWVdto0FRRbA89X0LQUG4PXlKS6o/tzdhpOuo40a10Nj2O5Vd7aZri0iXAuBju/Q1HQk3bAwxC8APBq2SceLEd/Hgh49Ip/L/tyTAiuiWClMr5CEb3/0l8PXPIzJmiYw7EsZUwm7LBJT7d3kwthNi4wqkv+TdWHY9TGaZWLxTurS1UgJuYXIDvERvR7o1ZTrJv7X1/5AnWestO4R2QIDAQAB
    NoEcho: true
Description: >
  open-kitch-app

Globals:
  Function:
    Timeout: 3
    MemorySize: 512
Resources:
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/dist
      Handler: authoriser.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          ACCESS_TOKEN_PUBLIC_KEY: !Ref AccessTokenPublicKey

  MenuFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: menu/dist
      Handler: request.handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: menuItems
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: !Ref DynamoDbEndpoint
          WEB_CLIENT_ORIGIN: !Ref WebClientOrigin

  MenuEventFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: menu/dist
      Handler: event.handler
      Runtime: nodejs12.x
      Timeout: 10
      Tracing: Active
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !Ref KitchenEventsStream
            BatchSize: 100
            StartingPosition: LATEST

  KitchenApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "open-kitch"
          version: "1.0"
        servers:
          - url: !Ref WebClientOrigin
        paths:
          /kitchens/{kitchenId}/menuItems:
            get:
              parameters:
                - name: "kitchenId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
              security:
                - Authorizer: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri:
                  !Join [
                    "",
                    [
                      "arn:aws:apigateway:",
                      !Ref AWS::Region,
                      ":lambda:path/2015-03-31/functions/",
                      !GetAtt MenuFunctions.Arn,
                      "/invocations",
                    ],
                  ]
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin:
                        !Join ["", ["'", !Ref WebClientOrigin, "'"]]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
          /kitchens/{kitchenId}/menuItems/{menuItemId}:
            put:
              parameters:
                - name: "kitchenId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "menuItemId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
              responses:
                "500":
                  description: "500 response"
                  content: {}
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                "200":
                  description: "200 response"
                  content: {}
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                credentials: "arn:aws:iam::651179183771:role/KinesisProxy"
                uri: "arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord"
                responses:
                  "200":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin:
                        !Join ["", ["'", !Ref WebClientOrigin, "'"]]
                  "500":
                    statusCode: "500"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin:
                        !Join ["", ["'", !Ref WebClientOrigin, "'"]]
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |
                    #set($payload="{
                      ""headers"" : {
                        ""source"":""user"",
                        ""requestId"": ""$context.requestId"",
                        ""traceId"" : ""$context.xrayTraceId"",
                        ""name"": ""menuItemSaveRequested""
                      },
                      ""menuId"" : ""$input.params('menuId')"",
                      ""kitchenId"" : ""$input.params('kitchenId')"" 
                      }")
                      {
                      "StreamName" : "kitchen-events",
                      "Data" : "$util.base64Encode($payload)",
                      "PartitionKey": "1"
                      }
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin:
                        !Join ["", ["'", !Ref WebClientOrigin, "'"]]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
        components:
          securitySchemes:
            Authorizer:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "custom"
              x-amazon-apigateway-authorizer:
                type: "token"
                authorizerUri:
                  !Join [
                    "",
                    [
                      "arn:aws:apigateway:",
                      !Ref AWS::Region,
                      ":lambda:path/2015-03-31/functions/",
                      !GetAtt AuthFunction.Arn,
                      "/invocations",
                    ],
                  ]
                authorizerResultTtlInSeconds: 300

  AuthFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - KitchenApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthFunction
      Principal: apigateway.amazonaws.com

  MenuFunctionsPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - KitchenApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MenuFunctions
      Principal: apigateway.amazonaws.com
